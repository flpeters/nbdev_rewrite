# AUTOGENERATED! DO NOT EDIT! View info comment on each cell for file to edit.


# Cell nr. 39; Comes from '00_export_v4.ipynb'
# This Flag allows anyone to know if this Module exists in their namespace
MODULE__IMPORTS__FLAG = None


# Cell nr. 40; Comes from '00_export_v4.ipynb'
import os,re,functools
import concurrent.futures
from threading import Thread
from queue import Queue
from configparser import ConfigParser
from pathlib import Path
# from nbformat.sign import NotebookNotary
# from base64 import b64decode,b64encode
# from types import MethodType,FunctionType


# Cell nr. 42; Comes from '00_export_v4.ipynb'
def test_eq(a,b): assert a==b, f'{a}, {b}'


# Cell nr. 44; Comes from '00_export_v4.ipynb'
def save_config_file(file, d, **kwargs):
    "Write settings dict to a new config file, or overwrite the existing one."
    config = ConfigParser(**kwargs)
    config['DEFAULT'] = d
    config.write(open(file, 'w'))


# Cell nr. 45; Comes from '00_export_v4.ipynb'
def read_config_file(file, **kwargs):
    config = ConfigParser(**kwargs)
    config.read(file)
    return config


# Cell nr. 46; Comes from '00_export_v4.ipynb'
_defaults = {"host": "github", "doc_host": "https://%(user)s.github.io", "doc_baseurl": "/%(lib_name)s/"}


# Cell nr. 47; Comes from '00_export_v4.ipynb'
def add_new_defaults(cfg, file):
    for k,v in _defaults.items():
        if cfg.get(k, None) is None: 
            cfg[k] = v
            save_config_file(file, cfg)


# Cell nr. 48; Comes from '00_export_v4.ipynb'
def _add_new_defaults(cfg, file, **kwargs):
    for k,v in kwargs.items():
        if cfg.get(k, None) is None:
            cfg[k] = v
            save_config_file(file, cfg)


# Cell nr. 49; Comes from '00_export_v4.ipynb'
@functools.lru_cache(maxsize=None)
class Config:
    "Store the basic information for nbdev to work"
    def __init__(self, cfg_name='settings.ini'):
        cfg_path = Path.cwd().absolute().resolve()
        while cfg_path != cfg_path.parent and not (cfg_path/cfg_name).exists(): cfg_path = cfg_path.parent
        self.config_path,self.config_file = cfg_path,cfg_path/cfg_name
        assert self.config_file.exists(), f"Could not find {cfg_name}"
        self.d = read_config_file(self.config_file)['DEFAULT']
        _add_new_defaults(self.d, self.config_file,
                          host="github",
                          doc_host="https://%(user)s.github.io",
                          doc_baseurl="/%(lib_name)s/")

    def __getattr__(self,k):
        if k.endswith('_path'): return self._path_to(k)
        try: return self.d[k]
        except KeyError: raise AttributeError(f"Config ({self.config_file.name}) has no attribute '{k}'") from None
    
    def _path_to(self,k,default=None):
        v = self.d.get(k, default)
        if v is None: raise AttributeError(f"Config ({self.config_file.name}) has no attribute '{k}'")
        return self.config_path/v
    
    def path_to(self,k,default=None):
        "Retrieve a path saved in Config relative to the folder the Config file is in."
        return self._path_to((k if k.endswith('_path') else k+'_path'), default)

    def get(self,k,default=None): return self.d.get(k, default)
    def __setitem__(self,k,v): self.d[k] = str(v)
    def __contains__(self,k):  return k in self.d
    def save(self): save_config_file(self.config_file,self.d)


# Cell nr. 50; Comes from '00_export_v4.ipynb'
def create_config(host, lib_name, user, path='.', cfg_name='settings.ini', branch='master',
               git_url="https://github.com/%(user)s/%(lib_name)s/tree/%(branch)s/", custom_sidebar=False,
               nbs_path='nbs', lib_path='%(lib_name)s', doc_path='docs', tst_flags='', version='0.0.1', **kwargs):
    "Creates a new config file for `lib_name` and `user` and saves it."
    g = locals()
    config = {o:g[o] for o in 'host lib_name user branch git_url lib_path nbs_path doc_path tst_flags version custom_sidebar'.split()}
    config = {**config, **kwargs}
    save_config_file(Path(path)/cfg_name, config)


# Cell nr. 52; Comes from '00_export_v4.ipynb'
def in_ipython():
    "Check if the code is running in the ipython environment (jupyter including)"
    program_name = os.path.basename(os.getenv('_', ''))
    if ('jupyter-notebook' in program_name or # jupyter-notebook
        'ipython'          in program_name or # ipython
        'JPY_PARENT_PID'   in os.environ):    # ipython-notebook
        return True
    else: return False
IN_IPYTHON = in_ipython()


# Cell nr. 53; Comes from '00_export_v4.ipynb'
def in_colab():
    "Check if the code is running in Google Colaboratory"
    try:
        from google import colab
        return True
    except: return False
IN_COLAB = in_colab()


# Cell nr. 54; Comes from '00_export_v4.ipynb'
def in_notebook():
    "Check if the code is running in a jupyter notebook"
    if in_colab(): return True
    try:
        shell = get_ipython().__class__.__name__
        if shell == 'ZMQInteractiveShell': return True   # Jupyter notebook, Spyder or qtconsole
        elif shell == 'TerminalInteractiveShell': return False  # Terminal running IPython
        else: return False  # Other type (?)
    except NameError: return False      # Probably standard Python interpreter
IN_NOTEBOOK = in_notebook()


# Cell nr. 56; Comes from '00_export_v4.ipynb'
def num_cpus():
    "Get number of cpus"
    try:                   return len(os.sched_getaffinity(0)) # NOTE: not available on all platforms
    except AttributeError: return os.cpu_count()


# Cell nr. 57; Comes from '00_export_v4.ipynb'
class ProcessPoolExecutor(concurrent.futures.ProcessPoolExecutor):
    "Like `concurrent.futures.ProcessPoolExecutor` but handles 0 `max_workers`."
    def __init__(self, max_workers=None, on_exc=print, **kwargs):
        self.not_parallel = max_workers==0
        self.on_exc = on_exc
        if self.not_parallel: max_workers=1
        super().__init__(max_workers, **kwargs)

    def map(self, f, items, *args, **kwargs):
        g = functools.partial(f, *args, **kwargs)
        if self.not_parallel: return map(g, items)
        try: return super().map(g, items)
        except Exception as e: self.on_exc(e)


# Cell nr. 58; Comes from '00_export_v4.ipynb'
def parallel(f, items, *args, n_workers=None, **kwargs):
    "Applies `func` in parallel to `items`, using `n_workers`"
    if n_workers is None: n_workers = min(16, num_cpus())
    with ProcessPoolExecutor(n_workers) as ex:
        r = ex.map(f,items, *args, **kwargs)
        return list(r)


# Cell nr. 59; Comes from '00_export_v4.ipynb'
# https://github.com/justheuristic/prefetch_generator
class BackgroundGenerator(Thread):
    "Computes elements of a Generator in a background Thread."
    def __init__(self, generator, max_prefetch:int=-1):
        """
        `generator`: A Generator to wrap and prefetch from in a separate thread.
        `max_prefetch`: How many items to maximally prefetch at any given time.
        If `max_prefetch` is <= 0, then the queue size is infinite.
        """
        super().__init__()
        self.queue, self.generator, self.daemon = Queue(max_prefetch), generator, True
        self.start()
    
    def run(self):
        try:
            for item in self.generator: self.queue.put(item)
        except Exception as e:
            print('WARNING: Failed in BackgroundGenerator Thread!')
            raise e
        finally: self.queue.put(StopIteration)
    
    def __iter__(self): return self
    def __next__(self):
        next_item = self.queue.get()
        if next_item is StopIteration: raise StopIteration
        return next_item


# Cell nr. 60; Comes from '00_export_v4.ipynb'
def prefetch(max_prefetch:int=-1):
    """
    Decorator for wrapping a `yield`-ing Function with `BackgroundGenerator`,
    which computes elements of the generator in a background Thread.
    
    A new instance of `BackgroundGenerator` is created every time the decorated function is called.
    
    `max_prefetch`: How many items to maximally prefetch at any given time.
    If `max_prefetch` is <= 0, then the queue size is infinite.
    """
    def decorator(generator):
        def wrapper(*args,**kwargs):
            return BackgroundGenerator(generator(*args,**kwargs), max_prefetch=max_prefetch)
        functools.update_wrapper(wrapper, generator)
        return wrapper
    return decorator


# Cell nr. 62; Comes from '00_export_v4.ipynb'
class ReLibName():
    "Regex expression that's compiled at first use but not before since it needs `Config().lib_name`"
    def __init__(self, pat, flags=0): self._re,self.pat,self.flags = None,pat,flags
    @property
    def re(self):
        if not hasattr(Config(), 'lib_name'): raise Exception("Please fill in the library name in settings.ini.")
        self.pat = self.pat.replace('LIB_NAME', Config().lib_name)
        if self._re is None: self._re = re.compile(self.pat, self.flags)
        return self._re


# Cell nr. 64; Comes from '00_export_v4.ipynb'
def compose(*funcs, order=None):
    "Create a function that composes all functions in `funcs`, "\
    "passing along remaining `*args` and `**kwargs` to all"
    if len(funcs)==0: return noop
    if len(funcs)==1: return funcs[0]
    def _inner(x, *args, **kwargs):
        for f in funcs: x = f(x, *args, **kwargs)
        return x
    return _inner


# Cell nr. 65; Comes from '00_export_v4.ipynb'
def last_index(x, o):
    "Finds the last index of occurence of `x` in `o` (returns -1 if no occurence)"
    try: return next(i for i in reversed(range(len(o))) if o[i] == x)
    except StopIteration: return -1