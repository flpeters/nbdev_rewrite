# AUTOGENERATED! DO NOT EDIT! View info comment on each cell for file to edit.


# Cell nr. 2; Comes from 'notebooks/00_export_v4.ipynb'
import sys
from pkg_resources import parse_version
from configparser import ConfigParser
from setuptools import setup, find_packages, __version__ as setuptools_version
assert parse_version(setuptools_version)>=parse_version('36.2')


# Cell nr. 3; Comes from 'notebooks/00_export_v4.ipynb'
CFG_NAMES = ['settings.ini'] # NOTE: Add alternative names/paths here
DEFAULT_SECTION = 'DEFAULT'


# Cell nr. 5; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: Load Config
config = ConfigParser(default_section=DEFAULT_SECTION)
files_found = config.read(CFG_NAMES)
if   len(files_found) <= 0:
    raise FileNotFoundError(f'No Config file could not be found.\n\t\tExpected one of: {CFG_NAMES}')
elif len(files_found) >  1:
    raise ValueError(f'More than one Config file found: {files_found}')
file_found = files_found[0]


# Cell nr. 6; Comes from 'notebooks/00_export_v4.ipynb'
key_err = KeyError(f'{file_found} does not have a section titled {DEFAULT_SECTION}')
try: cfg = dict(config[DEFAULT_SECTION])
except KeyError: raise key_err from None
if len(cfg) == 0: raise key_err


# Cell nr. 7; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: Handle cmd line arguments
if len(sys.argv)>1 and sys.argv[1]=='version':
    if 'version' in cfg:
        print(cfg['version'])
        exit()
    else: raise KeyError(f"No 'version' is present in {file_found}")


# Cell nr. 8; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: Parse Config Metadata
# https://docs.python.org/3/distutils/setupscript.html
# https://packaging.python.org/specifications/


# Cell nr. 9; Comes from 'notebooks/00_export_v4.ipynb'
if not ('lib_name' in cfg): raise KeyError(f"Missing 'lib_name' in {file_found}")


# Cell nr. 10; Comes from 'notebooks/00_export_v4.ipynb'
metadata = dict(name = cfg.pop('lib_name'), # POP
                entry_points = dict(console_scripts = list()),
                install_requires = list(), # ['pip', 'packaging']
                extras_require = dict(),
                classifiers = list(),
                project_urls = dict(),
               )


# Cell nr. 12; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: license
# NOTE: classifiers, license
if 'license' in cfg:
    # https://spdx.org/licenses/
    # https://pypi.org/classifiers/
    # https://choosealicense.com/licenses/
    L = {'Apache-2.0' : ('Apache License 2.0',
                         'OSI Approved :: Apache Software License'),
         'MIT'        : ('MIT License',
                         'OSI Approved :: MIT License'),
         'GPL-3.0'    : ('GNU General Public License v3.0 only',
                         'OSI Approved :: GNU General Public License v3 (GPLv3)'),
         'Unlicense'  : ('The Unlicense',
                         'OSI Approved :: The Unlicense (Unlicense)'),
        }
    aliases = {'apache2'   : 'Apache-2.0',
               'mit'       : 'MIT',
               'gpl3'      : 'GPL-3.0',
               'unlicense' : 'Unlicense',
              }
    license = cfg['license'] # POP
    if license in L:
        L0, L1 = L[license]
    elif license in aliases:
        L0, L1 = L[aliases[license]]
    else:
        raise ValueError(f"License identifier '{license}' in '{file_found}' is not recognized.\n"\
                         f"\tAvailable identifiers are: {list(L.keys())}\n\tAliases: {aliases}.") from None
    metadata['license'] = L0
    metadata['classifiers'].append(f'License :: {L1}')


# Cell nr. 13; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: python_requires
# NOTE: classifiers: Programming Language
if 'min_python' in cfg:
    py_v = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9'.split()
    min_python = cfg['min_python'] # POP
    assert '2.0' <= min_python, "A python version below '2.0' is not possible."
    if min_python not in py_v:
        print(f"[WARNING]: Minimum Python version '{min_python}' in '{file_found}' is not recognized.\n"\
              f"           Recognized versions are: {py_v}")
    metadata['python_requires'] = f'>={min_python}'
    
    metadata['classifiers'].append('Programming Language :: Python')
    if   '2.0' <= min_python < '3.0':
        metadata['classifiers'].append('Programming Language :: Python :: 2')
    elif '3.0' <= min_python < '4.0':
        metadata['classifiers'].append('Programming Language :: Python :: 3')
        metadata['classifiers'].append('Programming Language :: Python :: 3 :: Only')
    if min_python in py_v:
        metadata['classifiers'].extend([f'Programming Language :: Python :: {v}' for v in
                                        py_v[py_v.index(min_python):]])


# Cell nr. 14; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: classifiers: Development Status
if 'status' in cfg:
    statuses = ['1 - Planning', '2 - Pre-Alpha', '3 - Alpha', '4 - Beta',
                '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]
    status = cfg['status'] # POP
    try:
        metadata['classifiers'].append(f'Development Status :: {statuses[int(status)]}')
    except (ValueError, IndexError):
        raise ValueError(f"Status '{status}' is an invalid value in '{file_found}'. \n"\
                         "It can only take on one of the following: {'1', '2', '3', '4', '5', '6', '7'}") from None


# Cell nr. 15; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: classifiers: Natural Language
if 'language' in cfg:
    metadata['classifiers'].append(f"Natural Language :: {cfg['language'].title()}") # POP


# Cell nr. 16; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: classifiers: Intended Audience
if 'audience' in cfg:
    # TODO: Support lists as well?
    #       There can be multiple indended audiences e.g. 'Developers' + 'Science/Research'
    metadata['classifiers'].append(f"Intended Audience :: {cfg['audience'].title()}") # POP


# Cell nr. 17; Comes from 'notebooks/00_export_v4.ipynb'
# TODO: Add 'Operating System' identifier as well?


# Cell nr. 18; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: install_requires
if 'requirements' in cfg:
    metadata['install_requires'].extend(cfg['requirements'].split()) # POP


# Cell nr. 19; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: extras_require
if 'dev_requirements' in cfg:
    metadata['extras_require']['dev'] = cfg['dev_requirements'].split() # POP


# Cell nr. 20; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: entry_points: console_scripts
if 'console_scripts' in cfg:
    metadata['entry_points']['console_scripts'].extend(cfg['console_scripts'].split()) # POP


# Cell nr. 21; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: long_description
if not 'long_description' in cfg: # NOTE: Allow for long_description to be overwritten in settings.ini
    try: metadata['long_description'] = open('README.md').read()
    except FileNotFoundError:
        if 'description' in cfg:
            metadata['long_description'] = cfg['description'] # NOT POP
        else: pass


# Cell nr. 22; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: url
# NOTE: download_url
# NOTE: project_urls: Source Code
if 'git_url' in cfg:
    git_url = cfg['git_url'] # POP
    if (not 'url' in cfg):
        metadata['url'] = git_url # homepage
    if (not 'download_url' in cfg):
        metadata['download_url'] = git_url # TODO: use pipy url
    if (not 'source_url' in cfg):
        metadata['project_urls']['Source Code'] = git_url


# Cell nr. 23; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: project_urls: Documentation
if 'doc_host' in cfg:
    doc_url = cfg['doc_host'] # POP
    if 'doc_baseurl' in cfg: doc_url += cfg['doc_baseurl'] # POP
    metadata['project_urls']['Documentation'] = doc_url


# Cell nr. 24; Comes from 'notebooks/00_export_v4.ipynb'
# NOTE: project_urls: Bug Tracker
if 'bug_tracker_url' in cfg: # issues
    metadata['project_urls']['Bug Tracker'] = cfg['bug_tracker_url'] # POP


# Cell nr. 25; Comes from 'notebooks/00_export_v4.ipynb'
setup_kwargs = {k: cfg[k] for k in ['lib_name', 'author', 'author_email', 'maintainer',
                                 'maintainer_email', 'version', 'description', 'keywords',]
                if k in cfg}


# Cell nr. 26; Comes from 'notebooks/00_export_v4.ipynb'
setup_kwargs.update(packages                      = find_packages(where='.'),
                    include_package_data          = True,
                    long_description_content_type = 'text/markdown',
                    zip_safe                      = False,
                   )


# Cell nr. 28; Comes from 'notebooks/00_export_v4.ipynb'
setup_call = {**metadata, **setup_kwargs}


# Cell nr. 29; Comes from 'notebooks/00_export_v4.ipynb'
r"""
setup(**setup_call)
""";